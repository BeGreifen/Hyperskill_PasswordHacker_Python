type: edu
files:
- name: hacking/hack.py
  visible: true
  text: '# write your code here'
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    from threading import Thread
    from time import sleep
    from itertools import product
    import socket
    import random

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    abc = 'abcdefghijklmnopqrstuvwxyz1234567890'


    def generate_password():
        index = 1
        while True:
            abc = 'abcdefghijklmnopqrstuvwxyz1234567890'
            yield from product(abc, repeat=index)
            index += 1


    def random_password():
        '''function - generating random password of length from 2 to 3'''
        return ''.join(random.choice(abc) for i in range(random.randint(2, 3)))


    class Hacking(StageTest):

        def __init__(self, module):
            super().__init__(module)
            self.ready = False
            self.sock = None
            self.serv = None
            self.connected = False
            self.message = []
            self.password = None

        def start_server(self):
            self.serv = Thread(target=lambda: self.server())
            self.serv.start()
            self.ready = False
            while not self.ready:
                try:
                    sleep(0.1)  # socket needs to be set up before test
                except KeyboardInterrupt:
                    pass

        def stop_server(self):
            self.sock.close()
            self.serv.join()

        def server(self):
            '''function - creating a server and answering clients'''
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.sock.bind(('localhost', 9090))
            self.ready = True
            try:
                self.sock.listen(1)
                conn, addr = self.sock.accept()
                self.connected = True
                conn.settimeout(16)
                while True:
                    data = conn.recv(1024)
                    self.message.append(data.decode('utf8'))
                    if len(self.message) > 1_000_000:
                        conn.send('Too many attempts to connect!'.encode('utf8'))
                        break
                    if not data:
                        break
                    if data.decode('utf8') == self.password:
                        conn.send('Connection success!'.encode('utf8'))
                    else:
                        conn.send('Wrong password!'.encode('utf8'))
                conn.close()
            except:
                pass

        def generate(self):
            self.message = []
            self.password = random_password()
            self.start_server()
            return [
                TestCase(args=['localhost', '9090'],
                         attach=[self.password], time_limit=25000)
            ]

        def check(self, reply, attach):

            if not self.connected:
                return CheckResult.wrong("You didn't connect to the server")

            real_password = attach[0]
            if reply.split('\n')[0] != real_password:
                return CheckResult.wrong(f'The password you printed is not correct. The password is "{real_password}"')
            success = True
            for i in generate_password():
                if len(i) == len(real_password):
                    break
                try:
                    self.message.remove(''.join(i))
                except ValueError:
                    success = False
                    break
            if success:
                return CheckResult.correct()
            return CheckResult.wrong(
                'Your generator algorithm does not include all the variants')


    if __name__ == '__main__':
        test = Hacking('hacking.hack')
        test.run_tests()
        test.stop_server()
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import Hacking

    if __name__ == '__main__':    test = Hacking('hacking.hack')    test.run_tests()    test.stop_server()
  learner_created: false
- name: hacking/app.log
  visible: true
  text: |
    2023-08-13 13:25:31,692 - INFO - main - line no: 73 with args: (), kwargs: {}
    2023-08-13 13:25:31,693 - INFO - get_args - line no: 60 with args: (), kwargs: {}
    2023-08-13 13:25:31,693 - INFO - set_args - line no: 40 with args: (), kwargs: {}
    2023-08-13 13:25:31,694 - INFO - set_args returned: ArgumentParser(prog='hack.py', usage=None, description='Commandline inputs to start Hacking Password script.', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)
    2023-08-13 13:25:31,695 - INFO - get_args returned: Namespace(ip_address='localhost', message='password', port=9090)
    2023-08-13 13:25:31,695 - INFO - send_message_and_get_response - line no: 61 with args: ('localhost', 9090, 'password'), kwargs: {}
  learner_created: true
- name: app.log
  visible: true
  text: |
    2023-08-13 13:26:25,289 - INFO - main - line no: 73 with args: (), kwargs: {}
    2023-08-13 13:26:25,289 - INFO - get_args - line no: 60 with args: (), kwargs: {}
    2023-08-13 13:26:25,289 - INFO - set_args - line no: 40 with args: (), kwargs: {}
    2023-08-13 13:26:25,290 - INFO - set_args returned: ArgumentParser(prog='hack.py', usage=None, description='Commandline inputs to start Hacking Password script.', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)
    2023-08-13 13:26:25,290 - INFO - get_args returned: Namespace(ip_address='localhost', message='7y', port=9090)
    2023-08-13 13:26:25,290 - INFO - send_message_and_get_response - line no: 61 with args: ('localhost', 9090, '7y'), kwargs: {}
    2023-08-13 13:26:25,291 - INFO - send_message_and_get_response returned: Wrong password!
    2023-08-13 13:26:25,292 - INFO - main returned: None
  learner_created: true
feedback_link: https://hyperskill.org/projects/80/stages/443/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 13 Aug 2023 12:50:49 UTC"
record: -1
